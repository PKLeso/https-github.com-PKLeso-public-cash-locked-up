/*
 * Cash Locked Up Funds
 *
 * Cash Locked Up Funds
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace CashLockedUpFunds.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CashLockedUpResponse : IEquatable<CashLockedUpResponse>
    { 
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id")]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets TrustAccountId
        /// </summary>
        [DataMember(Name="trustAccountId")]
        public int? TrustAccountId { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name="currency")]
        public string Currency { get; set; }

        /// <summary>
        /// Gets or Sets RateOfExchange
        /// </summary>
        [DataMember(Name="rateOfExchange")]
        public decimal? RateOfExchange { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name="amount")]
        public decimal? Amount { get; set; }

        /// <summary>
        /// Gets or Sets AmountAtRateOfExchange
        /// </summary>
        [DataMember(Name="amountAtRateOfExchange")]
        public decimal? AmountAtRateOfExchange { get; set; }

        /// <summary>
        /// Gets or Sets LockUpDate
        /// </summary>
        [DataMember(Name="lockUpDate")]
        public string LockUpDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CashLockedUpResponse {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  TrustAccountId: ").Append(TrustAccountId).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  RateOfExchange: ").Append(RateOfExchange).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  AmountAtRateOfExchange: ").Append(AmountAtRateOfExchange).Append("\n");
            sb.Append("  LockUpDate: ").Append(LockUpDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CashLockedUpResponse)obj);
        }

        /// <summary>
        /// Returns true if CashLockedUpResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of CashLockedUpResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CashLockedUpResponse other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    TrustAccountId == other.TrustAccountId ||
                    TrustAccountId != null &&
                    TrustAccountId.Equals(other.TrustAccountId)
                ) && 
                (
                    Currency == other.Currency ||
                    Currency != null &&
                    Currency.Equals(other.Currency)
                ) && 
                (
                    RateOfExchange == other.RateOfExchange ||
                    RateOfExchange != null &&
                    RateOfExchange.Equals(other.RateOfExchange)
                ) && 
                (
                    Amount == other.Amount ||
                    Amount != null &&
                    Amount.Equals(other.Amount)
                ) && 
                (
                    AmountAtRateOfExchange == other.AmountAtRateOfExchange ||
                    AmountAtRateOfExchange != null &&
                    AmountAtRateOfExchange.Equals(other.AmountAtRateOfExchange)
                ) && 
                (
                    LockUpDate == other.LockUpDate ||
                    LockUpDate != null &&
                    LockUpDate.Equals(other.LockUpDate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (TrustAccountId != null)
                    hashCode = hashCode * 59 + TrustAccountId.GetHashCode();
                    if (Currency != null)
                    hashCode = hashCode * 59 + Currency.GetHashCode();
                    if (RateOfExchange != null)
                    hashCode = hashCode * 59 + RateOfExchange.GetHashCode();
                    if (Amount != null)
                    hashCode = hashCode * 59 + Amount.GetHashCode();
                    if (AmountAtRateOfExchange != null)
                    hashCode = hashCode * 59 + AmountAtRateOfExchange.GetHashCode();
                    if (LockUpDate != null)
                    hashCode = hashCode * 59 + LockUpDate.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CashLockedUpResponse left, CashLockedUpResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CashLockedUpResponse left, CashLockedUpResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
