/*
 * Cash Locked Up Funds
 *
 * Cash Locked Up Funds
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace CashLockedUpFunds.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CashLockedUpWithdrawableResponse : IEquatable<CashLockedUpWithdrawableResponse>
    { 
        /// <summary>
        /// Gets or Sets LockedUpFunds
        /// </summary>
        [DataMember(Name="lockedUpFunds")]
        public decimal? LockedUpFunds { get; set; }

        /// <summary>
        /// Gets or Sets TotalNAV
        /// </summary>
        [DataMember(Name="totalNAV")]
        public decimal? TotalNAV { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name="currency")]
        public string Currency { get; set; }

        /// <summary>
        /// Gets or Sets FreeCash
        /// </summary>
        [DataMember(Name="freeCash")]
        public decimal? FreeCash { get; set; }

        /// <summary>
        /// Gets or Sets UnsettledTrades
        /// </summary>
        [DataMember(Name="unsettledTrades")]
        public decimal? UnsettledTrades { get; set; }

        /// <summary>
        /// Gets or Sets Withdrawable
        /// </summary>
        [DataMember(Name="withdrawable")]
        public decimal? Withdrawable { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CashLockedUpWithdrawableResponse {\n");
            sb.Append("  LockedUpFunds: ").Append(LockedUpFunds).Append("\n");
            sb.Append("  TotalNAV: ").Append(TotalNAV).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  FreeCash: ").Append(FreeCash).Append("\n");
            sb.Append("  UnsettledTrades: ").Append(UnsettledTrades).Append("\n");
            sb.Append("  Withdrawable: ").Append(Withdrawable).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CashLockedUpWithdrawableResponse)obj);
        }

        /// <summary>
        /// Returns true if CashLockedUpWithdrawableResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of CashLockedUpWithdrawableResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CashLockedUpWithdrawableResponse other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    LockedUpFunds == other.LockedUpFunds ||
                    LockedUpFunds != null &&
                    LockedUpFunds.Equals(other.LockedUpFunds)
                ) && 
                (
                    TotalNAV == other.TotalNAV ||
                    TotalNAV != null &&
                    TotalNAV.Equals(other.TotalNAV)
                ) && 
                (
                    Currency == other.Currency ||
                    Currency != null &&
                    Currency.Equals(other.Currency)
                ) && 
                (
                    FreeCash == other.FreeCash ||
                    FreeCash != null &&
                    FreeCash.Equals(other.FreeCash)
                ) && 
                (
                    UnsettledTrades == other.UnsettledTrades ||
                    UnsettledTrades != null &&
                    UnsettledTrades.Equals(other.UnsettledTrades)
                ) && 
                (
                    Withdrawable == other.Withdrawable ||
                    Withdrawable != null &&
                    Withdrawable.Equals(other.Withdrawable)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (LockedUpFunds != null)
                    hashCode = hashCode * 59 + LockedUpFunds.GetHashCode();
                    if (TotalNAV != null)
                    hashCode = hashCode * 59 + TotalNAV.GetHashCode();
                    if (Currency != null)
                    hashCode = hashCode * 59 + Currency.GetHashCode();
                    if (FreeCash != null)
                    hashCode = hashCode * 59 + FreeCash.GetHashCode();
                    if (UnsettledTrades != null)
                    hashCode = hashCode * 59 + UnsettledTrades.GetHashCode();
                    if (Withdrawable != null)
                    hashCode = hashCode * 59 + Withdrawable.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CashLockedUpWithdrawableResponse left, CashLockedUpWithdrawableResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CashLockedUpWithdrawableResponse left, CashLockedUpWithdrawableResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
